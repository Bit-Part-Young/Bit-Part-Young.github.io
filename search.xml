<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用smms的api编写Python脚本实现自动上传图片并获取链接</title>
      <link href="/posts/16240.html"/>
      <url>/posts/16240.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="使用smms的api编写Python脚本实现自动上传图片并获取链接"><a href="#使用smms的api编写Python脚本实现自动上传图片并获取链接" class="headerlink" title="使用smms的api编写Python脚本实现自动上传图片并获取链接"></a>使用smms的api编写Python脚本实现自动上传图片并获取链接</h1><p>smms是另一个常用的图床，博主一般用smms上传影视截图，github图床用来上传博客中需要用到的图片。</p><p>smms域名为：</p><blockquote><p><a href="https://sm.ms/">https://sm.ms/</a></p></blockquote><p>不过最近这个域名在国内被墙了，其备用域名为：</p><blockquote><p><a href="https://smms.app/">https://smms.app</a></p><p>参考链接：<a href="https://github.com/Molunerfinn/PicGo/issues/963">https://github.com/Molunerfinn/PicGo/issues/963</a></p></blockquote><h2 id="smms在Typora或VSCode中的配置"><a href="#smms在Typora或VSCode中的配置" class="headerlink" title="smms在Typora或VSCode中的配置"></a>smms在Typora或VSCode中的配置</h2><p>smms和github图床一样，也可以和PicGo/PicGo-Core一起在Typora或VSCode中实现图片的自动上传。不过其配置简单很多，只需注册smms，获取token。</p><p>其在Typora中的json配置为：</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"current"</span><span class="token operator">:</span> <span class="token string">"smms"</span><span class="token punctuation">,</span> <span class="token comment">// 代表当前的默认上传图床为 SM.MS</span>    <span class="token property">"smms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">""</span> <span class="token comment">//这里是你的 SM.MS 账号的 API Token</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在VSCode中的设置几乎和Typora中的json配置一样。</p><h2 id="Python脚本实现自动上传图片并获取链接"><a href="#Python脚本实现自动上传图片并获取链接" class="headerlink" title="Python脚本实现自动上传图片并获取链接"></a>Python脚本实现自动上传图片并获取链接</h2><p>登录smms后，你可以点击API DOC选项栏，查看调用smms api的方式。</p><p>smms的api链接格式为<code>https://sm.ms/api/v2/</code>或<code>https://smms.app/api/v2/</code>，一般只需用到<code>upload</code>（上传图片）和<code>getHistory</code>（获取上传图片历史）两个参数，因此只需编写这两个函数即可。</p><p>编写Python脚本主要用来批量上传图片，算是一种偷懒的方式吧<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>脚本内容如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> os<span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token comment"># smms.app api configuration</span>headers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Authorization'</span><span class="token punctuation">:</span> <span class="token string">'xxx'</span><span class="token punctuation">}</span>  <span class="token comment"># smms.app</span><span class="token comment"># 若你电脑端在使用VPN，一般代理proxies需要设置一下</span>proxies <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"http"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token string">"https"</span><span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span>  <span class="token comment"># 方式1，设置成None</span><span class="token comment"># 方式2，找到你VPN的代理ip和端口，不过不一定有用，方式1更有用一些</span><span class="token comment"># proxies = { "http": "http://your VPN proxy ip:your VPN proxy port", "https": "https://your VPN proxy ip:your VPN proxy port"}</span>smms_api_url <span class="token operator">=</span> <span class="token string">'https://smms.app/api/v2/'</span><span class="token comment"># smms api configuration</span><span class="token comment"># headers = {'Authorization': 'jy5oSw3Ug61FVYMMw61wD6Koga72StRT'}  # sm.ms</span><span class="token comment"># smms_api_url = 'https://sm.ms/api/v2/'  # sm.ms</span><span class="token comment"># image path, 可修改项</span>dir_path <span class="token operator">=</span> <span class="token string">r'your image path'</span><span class="token comment"># flag标志, 可修改项</span><span class="token comment"># flag = 0  # 获取已上传图片BBCode,默认取最后三张图片的</span>flag <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 上传图片并获取其BBCode</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> upload<span class="token operator">=</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'smfile'</span><span class="token punctuation">:</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    url <span class="token operator">=</span> smms_api_url <span class="token operator">+</span> upload    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getHistory</span><span class="token punctuation">(</span>img_number<span class="token operator">=</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> history<span class="token operator">=</span><span class="token string">'upload_history'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> smms_api_url <span class="token operator">+</span> history    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> proxies<span class="token operator">=</span>proxies<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span>    <span class="token comment"># 影视截图一般上传3张即可</span>    res <span class="token operator">=</span> res<span class="token punctuation">[</span>img_number<span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token comment"># res = res[:]['filename']</span>    <span class="token keyword">for</span> res_item <span class="token keyword">in</span> res<span class="token punctuation">:</span>        item_url <span class="token operator">=</span> res_item<span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span>    <span class="token comment">#     item_time = res_item['created_at']</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[img]</span><span class="token interpolation"><span class="token punctuation">{</span>item_url<span class="token punctuation">}</span></span><span class="token string">[/img]"</span></span><span class="token punctuation">)</span>  <span class="token comment">#图片链接的BBCode形式</span><span class="token keyword">def</span> <span class="token function">get_image_path</span><span class="token punctuation">(</span>dirpath<span class="token punctuation">)</span><span class="token punctuation">:</span>    os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>dirpath<span class="token punctuation">)</span>  <span class="token comment"># 切换到图片路径</span>    <span class="token comment"># 获取图片路径下的图片列表</span>    file_list <span class="token operator">=</span> <span class="token builtin">reduce</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span>files <span class="token keyword">for</span> root<span class="token punctuation">,</span> dirs<span class="token punctuation">,</span> files <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> file_list<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> flag<span class="token punctuation">:</span>  <span class="token comment"># 上传图片并获取其BBCode</span>        n <span class="token operator">=</span> <span class="token number">0</span>        files <span class="token operator">=</span> get_image_path<span class="token punctuation">(</span>dir_path<span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token builtin">file</span> <span class="token keyword">in</span> files<span class="token punctuation">:</span>            n <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token builtin">file</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dir_path<span class="token punctuation">,</span> <span class="token builtin">file</span><span class="token punctuation">)</span>            upload<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Image </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> upload is done!'</span></span><span class="token punctuation">)</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"All </span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string"> images are uploaded! "</span></span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"------------------------------------"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The BBCode of uploaded images are: "</span><span class="token punctuation">)</span>        getHistory<span class="token punctuation">(</span><span class="token operator">-</span>n<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment"># 获取已上传图片BBCode,默认取最后三张图片的</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The BBCode of selected images are: "</span><span class="token punctuation">)</span>        getHistory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
          <category> 实用脚本 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> smms </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给没有目录/书签的电子书pdf生成目录/书签</title>
      <link href="/posts/19687.html"/>
      <url>/posts/19687.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="给没有目录-x2F-书签的电子书pdf生成目录-x2F-书签"><a href="#给没有目录-x2F-书签的电子书pdf生成目录-x2F-书签" class="headerlink" title="给没有目录/书签的电子书pdf生成目录/书签"></a>给没有目录/书签的电子书pdf生成目录/书签</h1><p>买不起纸质版书籍，而是经常下载电子书的小伙伴应该会不时遇到下载的版本没有目录/书签的问题，电子书没有目录/书签还是蛮令人头疼的，自己一个一个弄着实累人。最近在github上发现了一个可以为其生成目录/书签的工具，还蛮实用。该仓库的README文档中有较为详细的操作介绍，在这就不重新赘述了。</p><blockquote><p>参考链接：</p><p><a href="https://yafine-blog.cn/posts/b251.html">https://yafine-blog.cn/posts/b251.html</a></p><p><a href="https://github.com/ifnoelse/pdf-bookmark">https://github.com/ifnoelse/pdf-bookmark</a></p></blockquote><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 生成目录内容的时候，中文可能会出现乱码的情况，这时可以直接将china-pub中书籍详情页完整目录复制到pdf-bookmark目录编辑框中。</div><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 实用工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电子书 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用PicGo-Core/PicGo + github搭建免费图床并在Typora/VSCode写作中自动上传图片</title>
      <link href="/posts/7877.html"/>
      <url>/posts/7877.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="使用PicGo-Core-x2F-PicGo-github搭建免费图床在Typora-x2F-VSCode写作中自动上传图片"><a href="#使用PicGo-Core-x2F-PicGo-github搭建免费图床在Typora-x2F-VSCode写作中自动上传图片" class="headerlink" title="使用PicGo-Core/PicGo + github搭建免费图床在Typora/VSCode写作中自动上传图片"></a>使用PicGo-Core/PicGo + github搭建免费图床在Typora/VSCode写作中自动上传图片</h1><h2 id="使用PicGo-github搭建免费图床"><a href="#使用PicGo-github搭建免费图床" class="headerlink" title="使用PicGo + github搭建免费图床"></a>使用PicGo + github搭建免费图床</h2><p>主要流程：</p><ul><li>创建存储上传图片的仓库</li><li>生成一个token，用于PicGo访问github</li><li>下载PicGo，配置github图床</li></ul><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 配置github图床时，自定义分支填master，自定义域名填写CDN加速形式的url</div><blockquote><p>参考链接：</p><p><a href="https://zhuanlan.zhihu.com/p/489236769">https://zhuanlan.zhihu.com/p/489236769</a></p><p><a href="https://yafine-blog.cn/posts/eb3a.html">https://yafine-blog.cn/posts/eb3a.html</a></p></blockquote><h2 id="使用PicGo-Core在Typora写作中自动上传图片"><a href="#使用PicGo-Core在Typora写作中自动上传图片" class="headerlink" title="使用PicGo-Core在Typora写作中自动上传图片"></a>使用PicGo-Core在Typora写作中自动上传图片</h2><p>主要流程：</p><ul><li>配置Typora图片上传服务设定（上传服务选择PicGo-Core，也可以选择PicGo(app)）</li><li>填写配置json文件</li></ul><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 利用github搭建的图床时，图片重名会无法上传，需要用到rename-file插件（npm安装，npm安装package需要先安装node.js）</div><p>Typora + github + PicGo-Core + rename-file插件，json配置</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"picBed"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"current"</span><span class="token operator">:</span> <span class="token string">"github"</span><span class="token punctuation">,</span>    <span class="token property">"github"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"repo"</span><span class="token operator">:</span> <span class="token string">"username/repo"</span><span class="token punctuation">,</span>      <span class="token property">"branch"</span><span class="token operator">:</span> <span class="token string">"master"</span><span class="token punctuation">,</span>      <span class="token property">"token"</span><span class="token operator">:</span> <span class="token string">"xxxx"</span><span class="token punctuation">,</span>      <span class="token property">"path"</span><span class="token operator">:</span> <span class="token string">"images/"</span><span class="token punctuation">,</span>      <span class="token property">"customUrl"</span><span class="token operator">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/username/repo"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgoPlugins"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"picgo-plugin-rename-file"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"picgo-plugin-rename-file"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"format"</span><span class="token operator">:</span> <span class="token string">"{y}-{m}-{d}-{rand}-{origin}"</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> `picgo-plugin-rename-file`的`format`是图片重命名的格式</div><blockquote><p>参考链接：</p><p>PicGo软件下载地址：<a href="https://github.com/Molunerfinn/PicGo">https://github.com/Molunerfinn/PicGo</a></p><p>使用PicGo-Core将Github作为Typora的图床：<a href="https://blog.csdn.net/qq_42940160/article/details/120924588">https://blog.csdn.net/qq_42940160/article/details/120924588</a></p><p>内含rename-file插件重命名格式介绍：<a href="https://www.cnblogs.com/qmgta/p/16269578.html">https://www.cnblogs.com/qmgta/p/16269578.html</a></p><p>内含rename-file插件在json文件中的写法：<a href="https://jtxiao.com/main/posts/typora-pic-go-%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/">https://jtxiao.com/main/posts/typora-pic-go-插件的使用/</a></p></blockquote><h2 id="使用PicGo插件在VSCode写作中自动上传图片"><a href="#使用PicGo插件在VSCode写作中自动上传图片" class="headerlink" title="使用PicGo插件在VSCode写作中自动上传图片"></a>使用PicGo插件在VSCode写作中自动上传图片</h2><p>主要流程</p><ul><li>在VSCode的扩展商店中下载PicGo插件</li><li>在VSCode的设置中搜索PicGo，填写github图床设置，需要填写的内容几乎和第一步相同</li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在Typora写作中自动上传图片（鼠标右键该图片，选择“复制图片链接”，可以看到该图片的链接）</p><p><img src="https://cdn.jsdelivr.net/gh/Bit-Part-Young/BTY-imgs/images/2022-08-29-d0f250-MjlUB.png"></p><p>该图片生成的链接格式为：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">https://cdn.jsdelivr.net/gh/username/repo/images/2022-08-29-d0f250-MjlUB.png<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>2022-08-29-d0f250-MjlUB.png</code>是重命名后的文件名称</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 图床 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> Typora </tag>
            
            <tag> github </tag>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg+Shell批量图片转gif</title>
      <link href="/posts/36354.html"/>
      <url>/posts/36354.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="FFmpeg-Shell批量图片转gif"><a href="#FFmpeg-Shell批量图片转gif" class="headerlink" title="FFmpeg+Shell批量图片转gif"></a>FFmpeg+Shell批量图片转gif</h1><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i>  注： </div><ul><li>该内容技术含量不高，仅为自己的学习记录</li><li>以下批量操作也可以写bat批处理文件（自己还不会）</li><li>实现以下的操作需掌握的一些东西<ul><li>在windows或linux系统下安装FFmpeg；windows下写入环境变量</li><li>windows上使用Shell命令可以安装Git，之后在cmd中输入sh，进入bash环境；linux系统可直接操作</li><li>一些Shell命令：for循环，dirname、basename，变量，mkdir</li></ul></li></ul><h2 id="最简单的一张图片转gif，并控制像素大小"><a href="#最简单的一张图片转gif，并控制像素大小" class="headerlink" title="最简单的一张图片转gif，并控制像素大小"></a>最简单的一张图片转gif，并控制像素大小</h2><blockquote><p>在cmd中操作即可</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ffmpeg -f image2 -i <span class="token number">1</span>.jpg <span class="token number">1</span>.gifffmpeg -f image2 -i -vf <span class="token assign-left variable">scale</span><span class="token operator">=</span>531x299 <span class="token number">1</span>.jpg <span class="token number">1</span>.gif <span class="token comment"># scale 控制像素大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="批量图片转gif"><a href="#批量图片转gif" class="headerlink" title="批量图片转gif"></a>批量图片转gif</h2><h3 id="方式1-多张图片转一张gif"><a href="#方式1-多张图片转一张gif" class="headerlink" title="方式1 多张图片转一张gif"></a>方式1 多张图片转一张gif</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 将1_1.jpg这种形式的多个文件以每秒1张的帧率转换成一张gif</span><span class="token comment"># %后面的1个d表示一位数，按序号排列；2d表示01，02这种</span>ffmpeg -r <span class="token number">1</span> -f image2 -i 1_%d.jpg  out.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>以下的方式为多张图片批量转换成多张gif；需进入bash或sh环境下；</p></blockquote><h3 id="方式2"><a href="#方式2" class="headerlink" title="方式2"></a>方式2</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对文件夹下的部分jpg格式图片</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">{</span><span class="token number">7</span><span class="token punctuation">..</span><span class="token number">9</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">do</span> ffmpeg -f image2 -i <span class="token variable">${i}</span>.jpg out1_<span class="token variable">${i}</span>.gif<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方式3"><a href="#方式3" class="headerlink" title="方式3"></a>方式3</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对文件夹下的所有jpg格式图片</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.jpg<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token assign-left variable">D</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token assign-left variable">B</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">${i}</span>"</span><span class="token variable">)</span></span><span class="token punctuation">;</span> ffmpeg -f image2 -i <span class="token variable">${i}</span> <span class="token variable">$D</span>/<span class="token variable">${B<span class="token operator">%</span>.*}</span>.gif<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方式4"><a href="#方式4" class="headerlink" title="方式4"></a>方式4</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 把转换后的gif放到创建的新子文件夹下</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.jpg<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span> <span class="token assign-left variable">D</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token assign-left variable">B</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">${i}</span>"</span><span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$D</span>/gif/"</span><span class="token punctuation">;</span> ffmpeg -f image2 -i <span class="token variable">${i}</span> <span class="token variable">$D</span>/gif/<span class="token variable">${B<span class="token operator">%</span>.*}</span>.gif<span class="token punctuation">;</span> <span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="方式5-Shell脚本"><a href="#方式5-Shell脚本" class="headerlink" title="方式5 Shell脚本"></a>方式5 Shell脚本</h3><blockquote><p>脚本名为pic2gif.sh；运行命令：./pic2gif.sh</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token variable"><span class="token variable">$(</span><span class="token function">ls</span> *.jpg<span class="token variable">)</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token assign-left variable">D</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>    <span class="token assign-left variable">B</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> <span class="token string">"<span class="token variable">${i}</span>"</span><span class="token variable">)</span></span>    <span class="token function">mkdir</span> <span class="token string">"<span class="token variable">$D</span>/gif/"</span>    ffmpeg -f image2 -i <span class="token variable">${i}</span> <span class="token variable">$D</span>/gif/<span class="token variable">${B<span class="token operator">%</span>.*}</span>.gif<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FFmpeg </tag>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode常用插件</title>
      <link href="/posts/18925.html"/>
      <url>/posts/18925.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="VSCode常用插件-x2F-扩展"><a href="#VSCode常用插件-x2F-扩展" class="headerlink" title="VSCode常用插件/扩展"></a>VSCode常用插件/扩展</h1><h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><p>可以实现在VSCode中使用Vim文本编辑器，省去在linux中配置Vim步骤；如果对Vim使用较熟练的话，还是非常好用的</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><p>识别安装的Python环境，函数、参数自动补全，可直接或跳转查看函数帮助，非常好用</p><h2 id="TabOut"><a href="#TabOut" class="headerlink" title="TabOut"></a>TabOut</h2><p>使用场景：</p><p>使用VSCode敲代码时，经常会用到函数、列表和字符串等。引号和括号（小括号、大括号和中括号）成对出现，正常情况下跳转右括号和右引号需要按右箭头，但右箭头离主键盘较远，按起来不是很方便。因此需要一种方便跳转右括号和右引号的方式</p><h2 id="Remote-Development"><a href="#Remote-Development" class="headerlink" title="Remote Development"></a>Remote Development</h2><p>远程连接服务器和超算的扩展套件</p><h2 id="Lammps-Syntax-Highlighting"><a href="#Lammps-Syntax-Highlighting" class="headerlink" title="Lammps Syntax Highlighting"></a>Lammps Syntax Highlighting</h2><p>Lammps语法命令高亮</p><h2 id="PicGo"><a href="#PicGo" class="headerlink" title="PicGo"></a>PicGo</h2><p>图片上传插件，支持github，smms图床等</p><h2 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h2><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
          <category> 科研工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell学习教程</title>
      <link href="/posts/10457.html"/>
      <url>/posts/10457.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Shell学习教程"><a href="#Shell学习教程" class="headerlink" title="Shell学习教程"></a>Shell学习教程</h1><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串是Shell编程中最常用最有用的数据类型；字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p><strong>单双引号的区别：</strong></p><ul><li><strong>双引号里可以有变量</strong>，单引号则原样输出；</li><li>双引号里可以出现转义字符，单引号则原样输出；</li><li>单引号字串中不能出现单引号。</li></ul><h3 id="拼接字符串"><a href="#拼接字符串" class="headerlink" title="拼接字符串"></a>拼接字符串</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">str1</span><span class="token operator">=</span><span class="token string">'i'</span><span class="token assign-left variable">str2</span><span class="token operator">=</span><span class="token string">'love'</span><span class="token assign-left variable">str3</span><span class="token operator">=</span><span class="token string">'you'</span><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span> <span class="token variable">$str2</span> <span class="token variable">$str3</span><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span><span class="token variable">$str2</span><span class="token variable">$str3</span><span class="token builtin class-name">echo</span> <span class="token variable">$str1</span>,<span class="token variable">$str2</span>,<span class="token variable">$str3</span><span class="token comment"># 输出：</span><span class="token comment"># i love you</span><span class="token comment"># iloveyou</span><span class="token comment"># i,love,you</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">'i love you'</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>#str<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token comment"># 输出：10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">str</span><span class="token operator">=</span><span class="token string">'i love you'</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:1<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment"># 从第1个截取到末尾。注意从0开始。</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:2:2<span class="token punctuation">}</span><span class="token variable">`</span></span> <span class="token comment"># 从第2个截取2个。</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>str:0<span class="token punctuation">}</span><span class="token variable">`</span></span><span class="token comment"># 全部截取。</span><span class="token comment"># 输出：</span><span class="token comment"># love you</span><span class="token comment"># lo</span><span class="token comment"># i love you</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash/</span><span class="token assign-left variable">file0</span><span class="token operator">=</span><span class="token string">"test.yaml"</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>file0%.*<span class="token punctuation">}</span><span class="token variable">`</span></span>  <span class="token comment"># 打印.左边的字符串</span><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span>$<span class="token punctuation">{</span>file0<span class="token comment">#*.}</span><span class="token variable">`</span></span>  <span class="token comment"># 打印.右边的字符串</span><span class="token assign-left variable">file1</span><span class="token operator">=</span><span class="token string">"<span class="token variable">${file0<span class="token operator">%</span>.*}</span>-modified.<span class="token variable">${file0<span class="token operator">#</span>*.}</span>"</span><span class="token builtin class-name">echo</span> <span class="token variable">$file1</span><span class="token comment"># 输出：</span><span class="token comment"># test</span><span class="token comment"># yaml</span><span class="token comment"># test-modified.yaml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="条件判断：if语句"><a href="#条件判断：if语句" class="headerlink" title="条件判断：if语句"></a>条件判断：if语句</h3><p>语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> expression <span class="token punctuation">]</span><span class="token keyword">then</span>   Statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to be executed <span class="token keyword">if</span> expression is <span class="token boolean">true</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注意：<code>expression</code> 和方括号([ ])之间必须有空格，否则会有语法错误。</p></blockquote><p>三种if … else 语句：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">else</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span class="token keyword">if</span> <span class="token punctuation">..</span>. <span class="token keyword">elif</span> <span class="token punctuation">..</span>. <span class="token keyword">else</span> <span class="token punctuation">..</span>. <span class="token keyword">fi</span> 语句<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">for</span> 变量 <span class="token keyword">in</span> 列表<span class="token keyword">do</span>    command1    command2    <span class="token punctuation">..</span>.    commandN<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><p>只要while后面的条件满足，就一直执行do里面的代码块。</p><p>语法格式：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">while</span> <span class="token builtin class-name">command</span><span class="token keyword">do</span>   Statement<span class="token punctuation">(</span>s<span class="token punctuation">)</span> to be executed <span class="token keyword">if</span> <span class="token builtin class-name">command</span> is <span class="token boolean">true</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用Atomate计算弹性常数</title>
      <link href="/posts/54196.html"/>
      <url>/posts/54196.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h1><ol><li>创建你所要计算体系的POSCAR文件，用脚本将POSCAR中的结构读入并产生计算弹性常数workflow；</li><li>该workflow有26个fireworks，第1个是结构弛豫，第2-25是不同程度的变形（控制在弹性变形范围内（具体数值范围忘了，可看<code>wf_elastic_constant()</code>源代码），拉伸、压缩和剪切变形），第26个是分析弹性数据；</li><li><code>qlaunch rapidfire</code>命令提交这26个fireworks；</li><li>最后会在mongodb中新建一个elasticity的collection，里面有其拟合好的弹性常数，通过脚本获取。</li></ol><h1 id="产生计算弹性常数workflow脚本"><a href="#产生计算弹性常数workflow脚本" class="headerlink" title="产生计算弹性常数workflow脚本"></a>产生计算弹性常数workflow脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pymatgen<span class="token punctuation">.</span>core <span class="token keyword">import</span> Structure<span class="token keyword">from</span> fireworks <span class="token keyword">import</span> LaunchPad<span class="token keyword">from</span> atomate<span class="token punctuation">.</span>common<span class="token punctuation">.</span>powerups <span class="token keyword">import</span> add_namefile<span class="token keyword">from</span> atomate<span class="token punctuation">.</span>vasp<span class="token punctuation">.</span>powerups <span class="token keyword">import</span> add_modify_incar<span class="token punctuation">,</span> add_modify_kpoints<span class="token keyword">from</span> atomate<span class="token punctuation">.</span>vasp<span class="token punctuation">.</span>workflows <span class="token keyword">import</span> wf_elastic_constant<span class="token comment"># 添加了add_namefile和修改了部分incar参数</span>struct <span class="token operator">=</span> Structure<span class="token punctuation">.</span>from_file<span class="token punctuation">(</span><span class="token string">'POSCAR'</span><span class="token punctuation">)</span><span class="token comment"># 计算弹性常数用wf_elastic_constant()函数</span>workflow <span class="token operator">=</span> wf_elastic_constant<span class="token punctuation">(</span>struct<span class="token punctuation">)</span>workflow <span class="token operator">=</span>  add_namefile<span class="token punctuation">(</span>workflow<span class="token punctuation">)</span><span class="token comment"># 修改INCAR中的部分参数，与MP中的参数尽量保持一致</span>workflow <span class="token operator">=</span> add_modify_incar<span class="token punctuation">(</span>workflow<span class="token punctuation">,</span> modify_incar_params<span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'incar_update'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">'ISMEAR'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'ENCUT'</span><span class="token punctuation">:</span> <span class="token number">520</span><span class="token punctuation">,</span> <span class="token string">'EDIFF'</span><span class="token punctuation">:</span> <span class="token number">5e-5</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment"># 可以修改KPOINTS中的k点数目</span><span class="token comment"># workflow = add_modify_kpoints(workflow, modify_kpoints_params= {'kpoints_update': {}}    )</span>launchpad <span class="token operator">=</span> LaunchPad<span class="token punctuation">.</span>auto_load<span class="token punctuation">(</span><span class="token punctuation">)</span>launchpad<span class="token punctuation">.</span>add_wf<span class="token punctuation">(</span>workflow<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="获取弹性常数数据脚本"><a href="#获取弹性常数数据脚本" class="headerlink" title="获取弹性常数数据脚本"></a>获取弹性常数数据脚本</h1><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> atomate<span class="token punctuation">.</span>vasp<span class="token punctuation">.</span>database <span class="token keyword">import</span> VaspCalcDb<span class="token keyword">from</span> bson<span class="token punctuation">.</span>json_util <span class="token keyword">import</span> dumps<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> json<span class="token comment"># 连接db数据库</span>db_json_path <span class="token operator">=</span> <span class="token string">"your db.json file path"</span>atomate_db <span class="token operator">=</span> VaspCalcDb<span class="token punctuation">.</span>from_db_file<span class="token punctuation">(</span>db_json_path<span class="token punctuation">)</span><span class="token comment"># 将mongodb中存储的数据转化成json文件保存到本地，以后读取就不需再连接db数据库</span><span class="token keyword">def</span> <span class="token function">get_elastic_data_mongodb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 连接elasticity collection</span>    elastic_collection <span class="token operator">=</span> atomate_db<span class="token punctuation">.</span>db<span class="token punctuation">[</span><span class="token string">'elasticity'</span><span class="token punctuation">]</span>  <span class="token comment"># 连接elasticity collection</span>    <span class="token comment"># print(type(elastic_collection))</span>    elastic_entries <span class="token operator">=</span> elastic_collection<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 只有一条ehtry，find()可以没有参数</span>    elastic_entries_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>elastic_entries<span class="token punctuation">)</span>    <span class="token comment"># print(elastic_entries_list)</span>    elastic_json <span class="token operator">=</span> dumps<span class="token punctuation">(</span>elastic_entries_list<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'elastic-data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        <span class="token builtin">file</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>elastic_json<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'elastic data convert to json. Done! '</span><span class="token punctuation">)</span><span class="token comment"># 读取json文件中的弹性常数数据</span><span class="token keyword">def</span> <span class="token function">read_json_elastic_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'elastic-data.json'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>        content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    json_entries <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>content<span class="token punctuation">)</span>    elastic_tensor <span class="token operator">=</span> json_entries<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'elastic_tensor'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'raw'</span><span class="token punctuation">]</span> <span class="token comment"># raw或ieee_format形式</span>    <span class="token comment"># print(elastic_tensor)</span>    elastic_tensor_np <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>elastic_tensor<span class="token punctuation">)</span>    elastic_tensor_np <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">round</span><span class="token punctuation">(</span>elastic_tensor_np<span class="token punctuation">)</span>    <span class="token comment"># print(elastic_tensor_np)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'elastic tensor C11 is: </span><span class="token interpolation"><span class="token punctuation">{</span>elastic_tensor_np<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> GPa'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'elastic tensor C12 is: </span><span class="token interpolation"><span class="token punctuation">{</span>elastic_tensor_np<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> GPa'</span></span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'elastic tensor C44 is: </span><span class="token interpolation"><span class="token punctuation">{</span>elastic_tensor_np<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> GPa'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># get_elastic_data_mongodb()</span>    read_json_elastic_data<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
          <category> 高通量 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> Atomate </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把数据结构直接拆分到多个变量中，不要专门通过下标访问</title>
      <link href="/posts/58088.html"/>
      <url>/posts/58088.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Effective-Python"><a href="#Effective-Python" class="headerlink" title="Effective Python"></a>Effective Python</h1><blockquote><p>书中的代码：<a href="https://github.com/almazkun/effective_python">https://github.com/almazkun/effective_python</a></p></blockquote><h2 id="第1章-培养Pythonic思维"><a href="#第1章-培养Pythonic思维" class="headerlink" title="第1章 培养Pythonic思维"></a>第1章 培养Pythonic思维</h2><h3 id="第6条-把数据结构直接拆分到多个变量中，不要专门通过下标访问"><a href="#第6条-把数据结构直接拆分到多个变量中，不要专门通过下标访问" class="headerlink" title="第6条 把数据结构直接拆分到多个变量中，不要专门通过下标访问"></a>第6条 把数据结构直接拆分到多个变量中，不要专门通过下标访问</h3><p><strong>unpacking</strong></p><ul><li>拆分，特殊Python语法，可以把数据结构里面的多个值分别赋给相应的变量，只需一行代码</li><li><strong>可以原地交换两个变量</strong></li><li>凡可迭代对象均能拆分，无论里面还有多少层迭代结构</li><li>尽量通过unpacking来拆解序列之中的数据，而不要通过下标访问</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 将元组中的元素分别赋给多个变量</span>item <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"Peanut butter"</span><span class="token punctuation">,</span> <span class="token string">"Jelly"</span><span class="token punctuation">)</span>first<span class="token punctuation">,</span> second <span class="token operator">=</span> item <span class="token comment">#Unpacking</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">{</span>first<span class="token punctuation">}</span></span><span class="token string"> and </span><span class="token interpolation"><span class="token punctuation">{</span>second<span class="token punctuation">}</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># output</span><span class="token triple-quoted-string string">"""Peanut butter and Jelly"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 升序排序算法</span><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 若无该循环语句，只会进行一轮循环，不一定使得完全升序</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment"># Swap 原地交换两个变量</span>    <span class="token keyword">return</span> anames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"pretzels"</span><span class="token punctuation">,</span> <span class="token string">"carrots"</span><span class="token punctuation">,</span> <span class="token string">"arugula"</span><span class="token punctuation">,</span> <span class="token string">"bacon"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>bubble_sort<span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># output</span><span class="token triple-quoted-string string">"""['pretzels', 'carrots', 'arugula', 'bacon'] carrots pretzels['carrots', 'pretzels', 'arugula', 'bacon'] arugula pretzels['carrots', 'arugula', 'pretzels', 'bacon'] bacon pretzels['carrots', 'arugula', 'bacon', 'pretzels'] arugula carrots['arugula', 'carrots', 'bacon', 'pretzels'] bacon carrots['arugula', 'bacon', 'carrots', 'pretzels']"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 在for循环和enumerate()中使用unpacking</span>snacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"bacon"</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"donut"</span><span class="token punctuation">,</span> <span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"muffin"</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> rank<span class="token punctuation">,</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> calories<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>snacks<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"#</span><span class="token interpolation"><span class="token punctuation">{</span>rank<span class="token punctuation">}</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string"> has </span><span class="token interpolation"><span class="token punctuation">{</span>calories<span class="token punctuation">}</span></span><span class="token string"> calories"</span></span><span class="token punctuation">)</span><span class="token comment"># output</span><span class="token triple-quoted-string string">"""#1: bacon has 350 calories#2: donut has 240 calories#3: muffin has 190 calories"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最优化--最优性条件</title>
      <link href="/posts/6838.html"/>
      <url>/posts/6838.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="最优性条件"><a href="#最优性条件" class="headerlink" title="最优性条件"></a>最优性条件</h1><p>求解非线性最优化问题的基础是掌握最优解满足的必要和充分条件</p><ul><li>无约束优化</li><li>约束优化</li><li>鞍点问题</li></ul><h2 id="无约束问题的极值条件"><a href="#无约束问题的极值条件" class="headerlink" title="无约束问题的极值条件"></a>无约束问题的极值条件</h2><p>无约束最优化问题：<br>$$<br>\text{min}\enspace f(\boldsymbol{x}),\enspace \boldsymbol{x}\in R^{n}<br>$$</p><p><strong>定理</strong>：给 $ \bar{\boldsymbol{x}},\text{s.t.} \enspace f(\boldsymbol{x}) $可微，且$ \exists \boldsymbol{d},\enspace \text{s.t.}\enspace \nabla f(\bar{\boldsymbol{x}})\boldsymbol{d}&lt;0  $，则$ \exists \delta &gt;0,\enspace \text{s.t.} $<br>$$<br>f(\bar{\boldsymbol{x}}+\lambda \boldsymbol{d}) &lt; f(\bar{\boldsymbol{x}}),\enspace \forall \lambda \in (0,\lambda)<br>$$</p><p><strong>定理</strong>（局部极小的一阶必要条件）：$ f(\boldsymbol{x}) $ 在 $ \bar{\boldsymbol{x}} $ 可微，若 $ \bar{\boldsymbol{x}} $ 局部极小，$ \Longrightarrow \nabla f(\bar{\boldsymbol{x}})=\boldsymbol{0} $</p><p><strong>定理</strong>（局部极小的一阶必要条件）：$ f(\boldsymbol{x}) $ 在 $ \bar{\boldsymbol{x}} $ 二次可微，若 $ \bar{\boldsymbol{x}} $ 局部极小，$ \Longrightarrow \nabla ^{2}f(\bar{\boldsymbol{x}}) $ 半正定</p><p><strong>定理</strong>（二阶充分条件）：$ f(\boldsymbol{x}) $ 在 $ \bar{\boldsymbol{x}} $ 二次可微，若 $ \nabla f(\bar{\boldsymbol{x}})=0,\enspace \nabla ^{2}f(\bar{\boldsymbol{x}}) $ 正定$ \Longrightarrow \bar{\boldsymbol{x}} $ 局部极小</p><p><strong>定理</strong>（全局极小的充分必要条件）：$f(\boldsymbol{x}) $ 在 为可微凸函数，则 $ \bar{\boldsymbol{x}} $ 全局极小 $ \iff \nabla f(\bar{\boldsymbol{x}})=0$</p><h2 id="约束极值问题的最优性条件"><a href="#约束极值问题的最优性条件" class="headerlink" title="约束极值问题的最优性条件"></a>约束极值问题的最优性条件</h2><h3 id="约束极值问题"><a href="#约束极值问题" class="headerlink" title="约束极值问题"></a>约束极值问题</h3><p>约束极值问题：<br>$$<br>\begin{equation}<br>    \begin{aligned}<br>        \min &amp;\enspace f(\boldsymbol{x}) \enspace \enspace \boldsymbol{x} \in \mathbb{R}^n\<br>        \text{s.t.} &amp;\enspace g_i (\boldsymbol{x}) \geqslant 0, \enspace i=1,\cdots,m \enspace  \<br>                    &amp;\enspace h_j (\boldsymbol{x}) = 0, \enspace j=1,\cdots,l \enspace \<br>    \end{aligned}<br>\end{equation}<br>$$</p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 最优化 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nobodyの第一篇博客</title>
      <link href="/posts/59448.html"/>
      <url>/posts/59448.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="博客简介"><a href="#博客简介" class="headerlink" title="博客简介"></a>博客简介</h1><p>Hey，这里是Nobody的博客网站~<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p>创建博客网站的想法其实很久之前就有了，前阵子对公众号写编程和科研课题方面的文章时<strong>不能二次修改</strong>很是头疼，这个想法就愈发强烈了；网络资源虽然很丰富，但很杂而且很多内容很烂，并没有多大的作用，创建博客网站的另一个主要原因就是想<strong>筛选出能真正解决自己问题的精炼有用资源（也希望对读者有用）</strong>。磨磨蹭蹭耗时近一个月，最终，属于自己的博客网站诞生了！</p><p><strong>博客内容的主要方向</strong>将会是<strong>记录自己碎片化的编程、科研课题学习及自己感兴趣的一些内容</strong>，应该不太会涉及自己的个人生活（不想在诺大的网络中过多暴露自己）。</p><p>博客采用的框架是hexo + matery主题，部署在github上，购买域名，并添加一些其他功能。</p><hr><h1 id="博客已实现功能"><a href="#博客已实现功能" class="headerlink" title="博客已实现功能"></a>博客已实现功能</h1><p>目前博客网站已实现的功能有：</p><ul><li><input checked="" disabled="" type="checkbox"> 首页底部显示音乐（网易云歌单）</li><li><input checked="" disabled="" type="checkbox"> 单独音乐页面（网易云歌单）</li><li><input checked="" disabled="" type="checkbox"> 单独相册页面</li><li><input checked="" disabled="" type="checkbox"> 博客中插入音乐和B站视频</li><li><input checked="" disabled="" type="checkbox"> waline评论系统，无需登录即可提交评论，也可登录提交评论，所需权限很低</li><li><input checked="" disabled="" type="checkbox"> 基础功能的看板娘</li><li><input checked="" disabled="" type="checkbox"> 博客文章生成永久链接</li><li><input checked="" disabled="" type="checkbox"> 暗黑模式切换</li><li><input checked="" disabled="" type="checkbox"> 直达评论按钮</li><li><input checked="" disabled="" type="checkbox"> 内容折叠功能</li><li><input checked="" disabled="" type="checkbox"> 动态标题（离开或点击博客标签页，会出现可爱字体）</li><li><input checked="" disabled="" type="checkbox"> 导航页</li><li><input checked="" disabled="" type="checkbox"> 加载动画（吃豆子）</li><li><input checked="" disabled="" type="checkbox"> 外挂标签（类似markdown中的引用，不过可以显示红黄蓝三种颜色）</li><li><input checked="" disabled="" type="checkbox"> 支持RSS订阅</li><li><input checked="" disabled="" type="checkbox"> Hexo新建博客文章自动打开编辑器</li></ul><hr><h1 id="博客待实现-x2F-完善功能"><a href="#博客待实现-x2F-完善功能" class="headerlink" title="博客待实现/完善功能"></a>博客待实现/完善功能</h1><p>待实现或完善的功能：</p><ul><li><input disabled="" type="checkbox"> 可换装、对话的看板娘</li><li><input disabled="" type="checkbox"> 相册加密</li><li><input disabled="" type="checkbox"> 博客底部添加github badge</li><li><input disabled="" type="checkbox"> 添加思维导图渲染</li><li><input disabled="" type="checkbox"> 图片懒加载</li><li><input disabled="" type="checkbox"> 更加酷炫的外挂标签</li><li><input disabled="" type="checkbox"> Hexo博客文章展示pdf内容</li><li><input disabled="" type="checkbox"> 让博客支持通知功能</li><li><input disabled="" type="checkbox"> 修改主题字体</li><li><input disabled="" type="checkbox"> 博客网络优化（CDN加速等）</li><li><input disabled="" type="checkbox"> 解决markdown复选框在hexo博客中不显示的问题</li><li><input disabled="" type="checkbox"> …</li></ul><hr><p>Anyway，感谢看到最后！共同目睹Nobody以后的创作吧！</p><h1 id="博客已实现功能部分展示"><a href="#博客已实现功能部分展示" class="headerlink" title="博客已实现功能部分展示"></a>博客已实现功能部分展示</h1><h2 id="博客插入音乐"><a href="#博客插入音乐" class="headerlink" title="博客插入音乐"></a>博客插入音乐</h2>    <div id="aplayer-VkSHxAGO" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="1301245903" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"></div><hr><h2 id="博客插入视频"><a href="#博客插入视频" class="headerlink" title="博客插入视频"></a>博客插入视频</h2><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">    <iframe src="//player.bilibili.com/player.html?aid=984726281&amp;bvid=BV1Nt4y1n7hv&amp;cid=807808976&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%;height: 100%; left: 0; top: 0;">     </iframe></div>-----<h2 id="折叠功能"><a href="#折叠功能" class="headerlink" title="折叠功能"></a>折叠功能</h2><div class="spoiler collapsed">    <div class="spoiler-title">        点击显/隐内容    </div>    <div class="spoiler-content">        <p>Hi，这是隐藏内容</p>    </div></div><hr><h2 id="外挂标签"><a href="#外挂标签" class="headerlink" title="外挂标签"></a>外挂标签</h2><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 红色外挂标签</div><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 绿色外挂标签</div><div class="uk-alert uk-alert-warning"><i class="fa fa-exclamation-circle"></i> 黄色外挂标签</div><blockquote><p>好像不是黄色？</p></blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107.html"/>
      <url>/posts/16107.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
