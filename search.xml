<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux学习记录</title>
      <link href="/2022/07/30/Linux/"/>
      <url>/2022/07/30/Linux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Linux学习记录</p><span id="more"></span><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><blockquote><p>链接：<a href="https://www.runoob.com/linux/linux-system-contents.html">https://www.runoob.com/linux/linux-system-contents.html</a></p></blockquote><p><code>/bin</code>： 二进制文件的缩写, 这个目录存放着最经常使用的命令</p><p><code>/boot</code>： 存放的是启动 Linux 时使用的一些核心文件，包括一些连接文件以及镜像文件</p><p><code>/home</code>：用户主目录</p><p><code>/lib</code>：Library(库) 的缩写；存放着系统最基本的动态连接共享库，其作用类似于 Windows 里的 DLL 文件。几乎所有的应用程序都需要用到这些共享库。</p><p><code>/mnt</code>：让用户临时挂载别的文件系统</p><p><code>/opt</code>：optional(可选) 的缩写，给主机额外安装软件所摆放的目录</p><p><code>/proc</code>：Processes(进程) 的缩写，<code>/proc</code> 是一种伪文件系统（也即虚拟文件系统），存储的是当前内核运行状态的一系列特殊文件，这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p><p><code>/root</code>：系统管理员的主目录</p><p><code>/tmp</code>：temporary(临时) 的缩写；用来存放一些临时文件</p><p><code>/usr</code>：unix shared resources(共享资源) 的缩写，这是一个非常重要的目录，<strong>用户的很多应用程序和文件都放在这个目录下</strong>，类似于 windows 下的 program files 目录</p><p><code>/usr/src</code>：内核源代码默认的放置目录</p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>获取登录信息： - <code>w / who / last/ lastb</code></p><p>查看自己使用的Shell： - <code>ps</code></p><p>查看命令的说明和位置： - <code>whatis / which / whereis</code></p><p>清除屏幕上显示的内容： - <code>clear</code></p><p>查看帮助文档： - <code>man / info / --help / apropos</code></p><p>查看系统和主机名： - <code>uname / hostname</code></p><p>时间和日期： - <code>date / cal</code></p><p>重启和关机： - <code>reboot / shutdown</code></p><p>退出登录： - <code>exit / logout</code></p><p>查看历史命令： - <code>history</code>（查看到历史命令之后，可以用<code>!历史命令编号</code>来重新执行该命令；通过<code>history -c</code>可以清除历史命令）</p><h1 id="查看图片"><a href="#查看图片" class="headerlink" title="查看图片"></a>查看图片</h1><p>Ubuntu：查看图片可以用<code>display</code></p><p>Centos：pi上是该系统，查看图片可以用<code>eog</code>或<code>display</code></p><p><strong>curl</strong></p><ul><li>一个利用URL规则在命令行下工作的文件传输工具；强大的http命令行工具；支持文件的上传和下载（习惯称url为下载工具）</li><li>参数</li></ul><pre class="line-numbers language-none"><code class="language-none">-o/--output                                  # 把输出写到该文件中-O/--remote-name                      # 把输出写到该文件中，保留远程文件的文件名-#/--progress-bar                        # 进度条显示当前的传送状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>用法</li></ul><pre class="line-numbers language-none"><code class="language-none"># 下载文件curl -# -O https://img-home.csdnimg.cn/images/20201124032511.png<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="vim编辑器"><a href="#vim编辑器" class="headerlink" title="vim编辑器"></a>vim编辑器</h1><p>块模式</p><h1 id="设置软链接"><a href="#设置软链接" class="headerlink" title="设置软链接"></a>设置软链接</h1><p>ln -s dictory1 dictory2  未文件夹1 设置软链接 文件夹2</p><h1 id="ssh远程连接"><a href="#ssh远程连接" class="headerlink" title="ssh远程连接"></a>ssh远程连接</h1><p>la 和 ls -a  显示隐藏文件和文件夹</p><p>!!：执行上一条命令</p><p><strong>cp</strong></p><p>参数：</p><p><code>-f</code>：覆盖已经存在的目标文件而不给出提示</p><h1 id="解压缩-x2F-压缩"><a href="#解压缩-x2F-压缩" class="headerlink" title="解压缩/压缩"></a>解压缩/压缩</h1><h2 id="tar相关命令"><a href="#tar相关命令" class="headerlink" title="tar相关命令"></a>tar相关命令</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -cvf app.tar app <span class="token comment"># 压缩当前目录下的文件夹/文件app到app.tar</span><span class="token function">tar</span> -xvf app.tar     <span class="token comment"># 解压缩当前目录下的压缩包app.tar到app</span><span class="token function">tar</span> -tf app.tar      <span class="token comment"># 不解压的情况下查看压缩包里的内容</span><span class="token comment"># 对于 .tgz 或 .tar.gz 结尾的文件</span><span class="token function">tar</span> -xzf all.tar.gz<span class="token function">tar</span> -xzf all.tgz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 对于 .gz 结尾的文件</span><span class="token function">gzip</span> -d all.gzgunzip all.gz<span class="token comment"># 对于.zip</span><span class="token comment"># linux 下提供了 zip 和 unzip 程序</span><span class="token function">unzip</span> all.zip<span class="token comment"># 查看压缩文件</span>zcat <span class="token comment"># 可以查看.gz文件内容</span>bzcat <span class="token comment"># 可以直接查看.bz2文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2022/07/30/First-Blog/"/>
      <url>/2022/07/30/First-Blog/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>第一篇博文</p><span id="more"></span><p>这是Dark Knight的第一篇blog，期待以后的创作！</p><p>Emojis:</p><p><span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>😆</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f606.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><p><span class="github-emoji"><span>😃</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f603.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>  </p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python学习记录</title>
      <link href="/2022/07/30/Python/"/>
      <url>/2022/07/30/Python/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Python学习记录</p><span id="more"></span><p>查看Python相关模块中的函数帮助：进入Python环境，import该模块和函数，help(该函数)，会得到该函数的定义。</p><p><strong>单下划线<code>_</code></strong></p><ul><li>单个独立下划线可用作一个名字，来表示某个变量是临时的或无关紧要的</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, World.'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>空列表中创建多个空列表</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h1 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h1><ul><li>不允许同一个键出现两次。创建时如果同一个键被赋值两次，后一个值会被记住</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">tinydict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Manni'</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>tinydict<span class="token punctuation">)</span><span class="token comment"># output</span><span class="token punctuation">{</span><span class="token string">'Name'</span><span class="token punctuation">:</span> <span class="token string">'Manni'</span><span class="token punctuation">,</span> <span class="token string">'Age'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>键必须不可变，可以用数字，字符串或元组充当，用列表就不行</li><li><code>dict.keys()</code> 以列表返回一个字典所有的键</li><li><code>dict.values()</code> 以列表返回字典中的所有值</li><li><code>dict.items()</code> 以列表返回可遍历的(键, 值) 元组数组</li></ul><p><strong>for循环生成字典</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d1 <span class="token operator">=</span> <span class="token punctuation">{</span>x<span class="token punctuation">:</span>x<span class="token operator">*</span><span class="token number">10</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span>words <span class="token operator">=</span> <span class="token string">'a,b,c,d'</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> <span class="token punctuation">{</span>word<span class="token punctuation">:</span>i <span class="token keyword">for</span> i<span class="token punctuation">,</span>word <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>words<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">print</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>d2<span class="token punctuation">)</span><span class="token comment"># output</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>判断对象是否可迭代</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> collections<span class="token punctuation">.</span>abc <span class="token keyword">import</span> Iterable<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>Iterable<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># output</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>重构：就是在不影响代码执行结果的前提下对代码的结构进行调整</p><p><strong><strong>变量的作用域</strong></strong></p><ul><li>Python查找一个变量时会按照“局部作用域”、“嵌套作用域”、“全局作用域”和“内置作用域”的顺序进行搜索</li><li>内置作用域：Python内置的那些标识符，我们之前用过的<code>input</code>、<code>print</code>、<code>int</code>等都属于内置作用域</li><li><code>global</code>关键字来指示函数中的变量来自于全局作用域</li><li><code>nonlocal</code>关键字来指示变量来自于嵌套作用域</li></ul><p><strong>Python函数参数中的冒号与箭头</strong></p><ul><li>函数后面跟着的箭头是函数返回值的类型建议符，用来说明该函数返回的值是什么类型</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">twoSum</span><span class="token punctuation">(</span>num1<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>    <span class="token builtin">sum</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> num2    <span class="token keyword">return</span> <span class="token builtin">sum</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>**return</code>和<code>print</code>的区别**</p><p><strong>print</strong></p><p>将输出数据到控制台</p><p><strong>return</strong></p><ul><li>在交互模式下，return的结果会自动打印出来，而作为脚本单独运行时则需要print()才能显示（返回的结果不能输出到控制台）</li><li>return语句块后面的代码是不执行的</li><li>不带参数值的return语句返回None</li></ul><p><strong>Python函数参数前面一个星号（*）和两个星号（</strong>）的区别**</p><p><a href="https://www.runoob.com/w3cnote/python-one-and-two-star.html">https://www.runoob.com/w3cnote/python-one-and-two-star.html</a></p><ul><li>单星号（<em>）：</em>agrs  将所有参数以元组(tuple)的形式导入</li><li>双星号（<strong>）：</strong>kwargs  将参数以字典的形式导入</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>args<span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>foo<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> e<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> f<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span> g<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token comment"># output</span><span class="token number">1</span><span class="token number">2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token string">'e'</span><span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">:</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">:</span> <span class="token number">7</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>列表生成式/表达式 （List Comprehensions）</strong></p><ul><li>python内置的比较简单但是功能强大的用于生成list的生成式</li><li>语法：**[表达式  for循环  if语句]**  （if语句可以省略）</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 找到1-100内7的倍数</span>lis1 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment"># for循环的嵌套</span>lis2 <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token operator">+</span> j <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token string">"abc"</span> <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token string">"xyz"</span><span class="token punctuation">]</span><span class="token comment"># 将键和值合并成字符串</span>dict1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span>lis3 <span class="token operator">=</span> <span class="token punctuation">[</span>key <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token keyword">for</span> key<span class="token punctuation">,</span> value <span class="token keyword">in</span> dict1<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>lis3<span class="token punctuation">)</span><span class="token comment"># output</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'ax'</span><span class="token punctuation">,</span> <span class="token string">'ay'</span><span class="token punctuation">,</span> <span class="token string">'az'</span><span class="token punctuation">,</span> <span class="token string">'bx'</span><span class="token punctuation">,</span> <span class="token string">'by'</span><span class="token punctuation">,</span> <span class="token string">'bz'</span><span class="token punctuation">,</span> <span class="token string">'cx'</span><span class="token punctuation">,</span> <span class="token string">'cy'</span><span class="token punctuation">,</span> <span class="token string">'cz'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'a10'</span><span class="token punctuation">,</span> <span class="token string">'b20'</span><span class="token punctuation">,</span> <span class="token string">'c30'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><strong>匿名函数(Lambda)</strong></strong></p><p>语法：<code>lambda arguments: expression</code></p><ul><li>Lambda函数可以具有任意数量的参数，但只能有一个表达式。表达式被求值并返回。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">double <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span>times <span class="token operator">=</span> <span class="token keyword">lambda</span> y<span class="token punctuation">,</span> z<span class="token punctuation">:</span> y <span class="token operator">*</span> z<span class="token keyword">print</span><span class="token punctuation">(</span>double<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>times<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># output</span><span class="token number">10</span><span class="token number">50</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>通常将其用作高阶函数的参数</li></ul><p>filter()和map()接受一个函数和一个列表作为参数</p><p>map()：根据提供的函数对指定序列做映射；可以是一个或多个序列（返回值）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">my_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token comment"># 程序从列表中过滤出偶数项</span>new_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> my_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 使用map()将列表中的每个项加倍</span>new_list2 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span> my_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_list2<span class="token punctuation">)</span><span class="token comment"># output</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>enumerate()函数</strong></p><ul><li>枚举函数；迭代一个集合的同时获悉当前值在列表中的下标</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">seasons <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Spring'</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">enumerate</span><span class="token punctuation">(</span>seasons<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> season <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>seasons<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> season<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------"</span><span class="token punctuation">)</span><span class="token comment"># 指定 索引开始的下标序号</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> season <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>seasons<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> season<span class="token punctuation">)</span><span class="token comment"># output</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'Spring'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Summer'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Fall'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'Winter'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">0</span> Spring<span class="token number">1</span> Summer<span class="token number">2</span> Fall<span class="token number">3</span> Winter<span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token operator">-</span><span class="token number">1</span> Spring<span class="token number">2</span> Summer<span class="token number">3</span> Fall<span class="token number">4</span> Winter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>zip()函数</strong></p><ul><li>用于将可迭代的对象作为参数，将对象中对应的元素打包成一个个元组，然后返回由这些元组组成的列表</li><li>如果各个迭代器的元素个数不一致，则返回列表长度与最短的对象相同</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># output</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>glob()函数</strong></p><p><code>glob()</code>是python自己带的一个文件操作相关模块，用它可以查找符合自己目的的文件，类似于Windows下的文件搜索，支持通配符操作</p><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>Python没有函数重载的概念，那么后面的定义会覆盖之前的定义，也就意味着两个函数同名函数实际上只有一个是存在的。<strong>怎么解决这种命名冲突？</strong>Python中每个文件就代表了一个模块（module），我们在不同的模块中可以有同名的函数，在使用函数的时候我们通过<code>import</code><br>关键字导入指定的模块就可以区分到底要使用的是哪个模块中的函数</p><p><code>**__main__</code>的作用** </p><p>如果我们导入的模块除了定义函数之外还有可以执行代码，那么Python解释器在导入这个模块时就会执行这些代码，事实上我们可能并不希望如此，因此如果我们在模块中编写了执行代码，最好是将这些执行代码放入<code>if __name__ == '__main__':</code>的条件中，这样的话除非直接运行该模块，if条件下的这些代码是不会执行的，因为只有直接执行的模块的名字才是”<code>__main__</code>“。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># module.py</span><span class="token keyword">def</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment"># __name__是Python中一个隐含的变量它代表了模块的名字</span><span class="token comment"># 只有被Python解释器直接执行的模块的名字才是__main__</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call foo()'</span><span class="token punctuation">)</span>    foo<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'call bar()'</span><span class="token punctuation">)</span>    bar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># test.py</span><span class="token keyword">import</span> module<span class="token comment"># 导入module时 不会执行模块中if条件成立时的代码 因为模块的名字是module3而不是__main__</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>__init__.py</code></p><h1 id="类"><a href="#类" class="headerlink" title="类"></a>类</h1><p>面向对象：封装、继承和多态</p><p>对象是类的实例</p><p><strong>类变量：</strong>类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用</p><p><code>__init__</code>是定义的类的构造函数（一种特殊的方法），可以对类的变量进行初始化，<strong>每当该类被实例化的时候，就会先执行该构造函数</strong></p><p><code>self</code>代表类的实例，而非类；把各种属性绑定到<strong>self</strong></p><p>方法：类中定义的函数</p><p>访问属性：用点号<code>.</code></p><p><strong><strong>类的私有属性：</strong></strong><code>__private_attrs</code>，两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <code>self.__private_attrs</code> ；可以使用<code>object._className__attrName</code>（ <strong>对象名._类名__私有属性名</strong>）访问私有属性</p><p><strong>类的方法：</strong>在类的内部，使用 <code>def</code> 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 <code>self</code>，且为第一个参数</p><p><strong>类的私有方法：</strong><code>__private_method</code>，两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 <code>self.__private_methods</code></p><p><strong><code>_foo</code></strong>: 以单下划线开头的表示的是 protected 类型（保护类型）的变量，即保护类型只能允许其本身与子类进行访问，不能用于 <code>from module import *</code></p><p>基础重载方法：<code>__str__(self)</code>， 也支持运算符重载</p><p><strong>@property装饰器</strong></p><p><code>@property</code>：装饰器，把类中的方法变成属性来进行调用</p><ul><li>不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，<strong>那么如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作</strong>。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age    <span class="token comment"># 访问器 - getter方法</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">name</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_name    <span class="token comment"># 访问器 - getter方法</span>    <span class="token decorator annotation punctuation">@property</span>    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_age    <span class="token comment"># 修改器 - setter方法</span>    <span class="token decorator annotation punctuation">@age<span class="token punctuation">.</span>setter</span>  <span class="token comment"># 把类中的方法变成属性来进行调用（应该是？）</span>    <span class="token keyword">def</span> <span class="token function">age</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>_age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">play</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>_age <span class="token operator">&lt;=</span> <span class="token number">16</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s正在玩飞行棋.'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>_name<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s正在玩斗地主.'</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>_name<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    person <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token string">'王大锤'</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>    person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">22</span>    person<span class="token punctuation">.</span>play<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># person.name = '白元芳'  # AttributeError: can't set attribute</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><strong>静态方法和类方法</strong></strong></p><p><code>@staticmethod</code>： 一般在类中定义的方法都是对象方法，也就是说这些方法都是发送给对象的消息；但实际上，写在类中的方法并不需要都是对象方法</p><p><code>@classmethod</code>： </p><p>类与方法</p><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>异常处理语句：<code>try...excpet...finally</code></p><ul><li><code>except</code>语句不是必须的，<code>finally</code>语句也不是必须的，但是二者必须要有一个</li><li><code>except</code>语句可以以元组形式同时指定多个异常</li><li><code>finally</code>块的代码不论程序正常还是异常都会执行到；称为“总是执行代码块”；它最适合用来做释放外部资源的操作</li><li><code>except</code>语句后面如果不指定异常类型，则默认捕获所有异常，你可以通过logging或者sys模块获取当前异常</li></ul><p>抛出异常：<code>raise</code></p><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><ul><li>在Python中实现文件的读写操作：通过Python内置的<code>open</code>函数，我们可以指定文件名、操作模式、编码信息等来获得操作文件的对象，接下来就可以对文件进行读写操作了</li><li>操作模式是指要打开什么样的文件（字符文件还是二进制文件）以及做什么样的操作（读、写还是追加）</li></ul><table><thead><tr><th>操作模式</th><th>具体含义</th></tr></thead><tbody><tr><td>‘r’</td><td>读取 （默认）</td></tr><tr><td>‘w’</td><td>写入（会先截断之前的内容）</td></tr><tr><td>‘x’</td><td>写入，如果文件已经存在会产生异常</td></tr><tr><td>‘a’</td><td>追加，将内容写入到已有文件的末尾</td></tr><tr><td>‘b’</td><td>二进制模式</td></tr><tr><td>‘t’</td><td>文本模式（默认）</td></tr><tr><td>‘+’</td><td>更新（既可以读又可以写）</td></tr></tbody></table><ul><li><p>通过<code>encoding</code>参数指定编码（如果不指定，默认值是None，那么在读取文件时使用的是操作系统默认的编码），如果不能保证保存文件时使用的编码方式与encoding参数指定的编码方式是一致的，那么就可能因无法解码字符而导致读取失败</p></li><li><p><code>open()</code>函数返回的是文件的流对象（而不是文件本身）</p></li><li><p>使用<code>open()</code>打开文件，<strong>必须要使用<code>close()</code>关闭文件</strong>（为保证无论是否出错都能正确地关闭文件）；<code>with open()</code><strong>可以不用<code>close()</code>关闭文件</strong>（无论在文件使用中遇到什么问题都能安全的退出，即使发生错误，退出运行时环境时也能安全退出文件并给出报错信息）</p></li></ul><p><strong><strong>读写文本文件</strong></strong></p><ul><li>除了使用文件对象的<code>read</code>方法读取文件之外，还可以使用<code>for-in</code>循环逐行读取或者用<code>readlines</code>方法将文件按行读取到一个列表容器中</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 一次性读取整个文件内容</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'致橡树.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 通过for-in循环逐行读取</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'致橡树.txt'</span><span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 读取文件按行读取到列表中</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'致橡树.txt'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>lines<span class="token punctuation">)</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><strong>读写二进制文件</strong></strong></p><ul><li>图片文件是二进制文件</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'Alice.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs1<span class="token punctuation">:</span>            data <span class="token operator">=</span> fs1<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># &lt;class 'bytes'&gt;</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'Alice-copy.png'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs2<span class="token punctuation">:</span>            fs2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">except</span> FileNotFoundError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'指定的文件无法打开.'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> IOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'读写文件时出现错误.'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'程序执行结束.'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>下载网络中的图片</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsimg <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://avatar.csdn.net/2/E/C/3_u010590983.jpg'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'csdn-avatar.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">.</span>content<span class="token punctuation">)</span>img <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://avatar.csdn.net/2/E/C/3_u010590983.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'csdn-avatar.jpg'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>img<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><strong>读写JSON文件</strong></strong></p><ul><li>保存列表或字典中的数据，可以以JSON格式进行保存（跟Python中的字典其实是一样的；需引入<code>json</code>模块）</li><li>JSON格式例子</li></ul><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"骆昊"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">38</span><span class="token punctuation">,</span>    <span class="token property">"qq"</span><span class="token operator">:</span> <span class="token number">957658</span><span class="token punctuation">,</span>    <span class="token property">"friends"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"王大锤"</span><span class="token punctuation">,</span> <span class="token string">"白元芳"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token property">"cars"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span><span class="token property">"brand"</span><span class="token operator">:</span> <span class="token string">"BYD"</span><span class="token punctuation">,</span> <span class="token property">"max_speed"</span><span class="token operator">:</span> <span class="token number">180</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"brand"</span><span class="token operator">:</span> <span class="token string">"Audi"</span><span class="token punctuation">,</span> <span class="token property">"max_speed"</span><span class="token operator">:</span> <span class="token number">280</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">{</span><span class="token property">"brand"</span><span class="token operator">:</span> <span class="token string">"Benz"</span><span class="token punctuation">,</span> <span class="token property">"max_speed"</span><span class="token operator">:</span> <span class="token number">320</span><span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    mydict <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'骆昊'</span><span class="token punctuation">,</span>        <span class="token string">'age'</span><span class="token punctuation">:</span> <span class="token number">38</span><span class="token punctuation">,</span>        <span class="token string">'qq'</span><span class="token punctuation">:</span> <span class="token number">957658</span><span class="token punctuation">,</span>        <span class="token string">'friends'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'王大锤'</span><span class="token punctuation">,</span> <span class="token string">'白元芳'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">'cars'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span><span class="token string">'brand'</span><span class="token punctuation">:</span> <span class="token string">'BYD'</span><span class="token punctuation">,</span> <span class="token string">'max_speed'</span><span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'brand'</span><span class="token punctuation">:</span> <span class="token string">'Audi'</span><span class="token punctuation">,</span> <span class="token string">'max_speed'</span><span class="token punctuation">:</span> <span class="token number">280</span><span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token punctuation">{</span><span class="token string">'brand'</span><span class="token punctuation">:</span> <span class="token string">'Benz'</span><span class="token punctuation">,</span> <span class="token string">'max_speed'</span><span class="token punctuation">:</span> <span class="token number">320</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.json'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fs<span class="token punctuation">:</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>mydict<span class="token punctuation">,</span> fs<span class="token punctuation">)</span>    <span class="token keyword">except</span> IOError <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'保存数据完成!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>四个重要函数</li></ul><p><code>dump</code> - 将Python对象按照JSON格式序列化到文件中</p><p><code>dumps</code> - 将Python对象处理成JSON格式的字符串</p><p><code>load</code> - 将文件中的JSON数据反序列化成对象</p><p><code>loads</code> - 将字符串的内容反序列化成Python对象</p><p>序列化：指将数据结构或对象状态转换为可以存储或传输的形式</p><p>反序列化：从一系列字节中提取数据结构的操作</p><h1 id="一些模块"><a href="#一些模块" class="headerlink" title="一些模块"></a>一些模块</h1><ul><li><code>shutil</code>模块提供了许多关于文件和文件集合的高级操作，特别提供了<strong>支持文件复制和删除</strong>的功能</li><li><code>gzip</code>模块提供的简单接口帮助用户压缩和解压缩文件，功能类似于linux中的<code>gzip</code>和<code>gunzip</code></li></ul><h1 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h1><p>plt.savefig()中的字符串与变量（单个或多个均可）结合</p><p>用<code>f-strings</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 变量是n</span>plt<span class="token punctuation">.</span>savefig<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"MC-coin-flip-iteration-</span><span class="token interpolation"><span class="token punctuation">{</span>n<span class="token punctuation">}</span></span><span class="token string">.png"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/07/30/hello-world/"/>
      <url>/2022/07/30/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
